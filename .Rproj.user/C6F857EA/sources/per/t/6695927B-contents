---
title: "Ch2"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Environment

```{r}
library(boot)
library(ggplot2)
library(reticulate)

PSDS_PATH <- file.path((getwd()))
PSDS_PATH
loans_income <- read.csv(file.path(PSDS_PATH, 'data', 'loans_income.csv'))
loans_income <- loans_income[, 1]   # convert data frame to vector
loans_income
sp500_px <- read.csv(file.path(PSDS_PATH, 'data', 'sp500_data.csv.gz'), row.names=1)

# conda_install("r-reticulate", "sklearn"), not work...check next line.
# conda_install("r-reticulate", "sklearn", pip = T) #for python code execution
```

```{python}
from pathlib import Path
import pandas as pd
import numpy as np
from scipy import stats
import sklearn
from sklearn.utils import resample

import seaborn as sns
import matplotlib.pylab as plt

try:
    import common
    DATA = common.dataDirectory()
except ImportError:
    DATA = Path().resolve() / 'data'

# Define paths to data sets. If you don't keep your data in the same directory as the code, adapt the path names.

LOANS_INCOME_CSV = DATA / 'loans_income.csv'
SP500_DATA_CSV = DATA / 'sp500_data.csv.gz'
```



## 2.1 Random Sampling and Sample Bias

## 2.2 Seletion Bias

## 2.3 Sampling Distribution of a Statistic

### R

```{r sampling_dist}
samp_data <- data.frame(income=sample(loans_income, 1000), 
                        type='data_dist')
samp_data

# take a sample of means of 5 values
samp_mean_05 <- data.frame(
  income = tapply(sample(loans_income, 1000*5), 
                  rep(1:1000, rep(5, 1000)), FUN=mean),
  type = 'mean_of_5')

samp_mean_05

# take a sample of means of 20 values
samp_mean_20 <- data.frame(
  income = tapply(sample(loans_income, 1000*20), 
                  rep(1:1000, rep(20, 1000)), FUN=mean),
  type = 'mean_of_20')

samp_mean_20

# bind the data.frames and convert type to a factor
income <- rbind(samp_data, samp_mean_05, samp_mean_20)
income$type <- factor(income$type, 
                     levels=c('data_dist', 'mean_of_5', 'mean_of_20'),
                     labels=c('Data', 'Mean of 5', 'Mean of 20'))

ggplot(income, aes(x=income)) +
  geom_histogram(bins=40) +
  facet_grid(type ~ .)
```

### Py

```{python sampling_dist}
loans_income = pd.read_csv(LOANS_INCOME_CSV, squeeze=True)

#First time to see the syntax as "for _ in range(1000)" in Dict. comprehension.
sample_data = pd.DataFrame({
    'income': loans_income.sample(1000),
    'type': 'Data',
})

sample_mean_05 = pd.DataFrame({
    'income': [loans_income.sample(5).mean() for _ in range(1000)],
    'type': 'Mean of 5',
})

sample_mean_20 = pd.DataFrame({
    'income': [loans_income.sample(20).mean() for _ in range(1000)],
    'type': 'Mean of 20',
})

results = pd.concat([sample_data, sample_mean_05, sample_mean_20])
print(results.head())

g = sns.FacetGrid(results, col='type', col_wrap=1, 
                  height=2, aspect=2)
g.map(plt.hist, 'income', range=[0, 200000], bins=40)
g.set_axis_labels('Income', 'Count')
g.set_titles('{col_name}')

plt.tight_layout()
plt.show()
```

## 2.4 The Bootstrap

### R

```{r loans}
# As the calculation uses random samples, results will vary between runs. Consider to have set seeds in necessary.

set.seed(3)
library(boot)
stat_fun <- function(x, idx) median(x[idx])
# loans_income
boot_obj <- boot(loans_income, R=1000, statistic=stat_fun)

median(loans_income)

#The bias is explained more completely in Python. `results.mean() - loans_income.median()`
boot_obj

```

### Py

```{python loans}
results = []
for nrepeat in range(1000):
    sample = resample(loans_income)
    results.append(sample.median())
results = pd.Series(results)
results 
print('Bootstrap Statistics:')
print(f'original: {loans_income.median()}')
print(f'bias: {results.mean() - loans_income.median()}')
print(f'std. error: {results.std()}')
```

## 2.5 Confidence Interval

### R

```{r loans_CI}
set.seed(5)
set.seed(7)

#單一次抽樣，與其樣本（20/50000）
mean(loans_income) #68760.52
sample20 <- sample(loans_income, 20)
sampleMean <- mean(sample20)

#Bootstrap
#在 loans code chunk，stat_fun 是用 median。
stat_fun <- function(x, idx) mean(x[idx])
boot_obj <- boot(sample20, R=500, statistic=stat_fun)
boot_ci <- boot.ci(boot_obj, conf=0.9, type='basic')

X <- data.frame(mean=boot_obj$t)
boot_obj$t #length of 500
mean(boot_obj$t) #results' mean 58377.08
X #row_numbers = 500


boot_ci$basic
ci90 <- boot_ci$basic[4:5] #get the Interval endpoints
ci <- data.frame(ci=ci90, y=c(9, 11)) #y=c(9, 11)), handy to be consistent with counts, or y-axis.
ci

sampleMean #58447.25
ci #51643.09 65262.95	(51643.09+65262.95)/2 = 58453 一定不會等於 單一次抽樣的


library(ggplot2)
ggplot(X, aes(x=mean)) +
    geom_histogram(bins=40, fill='#AAAAAA') +
    geom_vline(xintercept=sampleMean, linetype=1) + #58447.25 sample mean of 20
    geom_vline(xintercept=mean(boot_obj$t), linetype=2) + #58377.08 result's mean of 20 with Bootstrap process
    geom_path(aes(x=ci, y=10), data=ci, size=2) +
    geom_path(aes(x=ci90[1], y=y), data=ci, size=2) +
    geom_path(aes(x=ci90[2], y=y), data=ci, size=2) +
    geom_text(aes(x=sampleMean, y=20, label='Sample mean'), size=6) +
    geom_text(aes(x=sampleMean, y=8, label='90% interval'), size=6) +
    theme_bw() + 
    labs(x='', y='Counts')
```
### Py

```{python loans_CI}
## Confidence Intervals

print(loans_income.mean()) #68760.51844

np.random.seed(seed=3)  
# create a sample of 20 loan income data
sample20 = resample(loans_income, n_samples=20, replace=False)
print(sample20.mean()) #55734.1
```

```{python loans_CI2}
results = []
for nrepeat in range(500):
    sample = resample(sample20)
    results.append(sample.mean())
results = pd.Series(results)
```

```{python loans_CI90}
confidence_interval = list(results.quantile([0.05, 0.95]))

ax = results.plot.hist(bins=30, figsize=(4, 3))
ax.plot(confidence_interval, [55, 55], color='black')
for x in confidence_interval:
    ax.plot([x, x], [0, 65], color='black')
    ax.text(x, 70, f'{x:.0f}', 
            horizontalalignment='center', verticalalignment='center')
ax.text(sum(confidence_interval) / 2, 60, '90% interval',
        horizontalalignment='center', verticalalignment='center')

meanIncome = results.mean()
meanIncome #55836, mean of the mean from Bootstrap process
# print(sample20.mean()) #55734.1
# print(loans_income.mean()) #68760.51844
ax.plot([meanIncome, meanIncome], [0, 50], color='black', linestyle='--')
ax.text(meanIncome, 10, f'Mean: {meanIncome:.0f}',
        bbox=dict(facecolor='white', edgecolor='white', alpha=0.5),
        horizontalalignment='center', verticalalignment='center')
ax.set_ylim(0, 80)
ax.set_ylabel('Counts')

# plt.clf()

plt.tight_layout()
plt.show()
```

```{python loans_CI95}

np.random.seed(seed=3)
# create a sample of 20 loan income data
sample20 = resample(loans_income, n_samples=20, replace=False)

results = []
for nrepeat in range(500):
    sample = resample(sample20)
    results.append(sample.mean())
results = pd.Series(results)

confidence_interval = list(results.quantile([0.05, 0.95]))
ax = results.plot.hist(bins=30, figsize=(4, 3), color='C1')
ax.plot(confidence_interval, [55, 55], color='black', linestyle='--')
for x in confidence_interval:
    ax.plot([x, x], [0, 60], color='black')
ax.text(82000, 50, 
        f'90% CI\n[{confidence_interval[0]:.0f}, {confidence_interval[1]:.0f}]',
       fontsize='small')

confidence_interval = list(results.quantile([0.025, 0.975]))
ax = results.plot.hist(bins=30, figsize=(4, 3))
ax.plot(confidence_interval, [65, 65], color='black', linestyle='--')
for x in confidence_interval:
    ax.plot([x, x], [0, 70], color='black')
ax.text(82000, 65, 
        f'95% CI\n[{confidence_interval[0]:.0f}, {confidence_interval[1]:.0f}]',
       fontsize='small')
# ax.text(sum(confidence_interval) / 2, 264, '95 % interval',
#         horizontalalignment='center', verticalalignment='center')

meanIncome = results.mean()
meanIncome
ax.plot([meanIncome, meanIncome], [0, 50], color='black', linestyle='--')
ax.text(meanIncome, 5, f'Mean: {meanIncome:.0f}',
        bbox=dict(facecolor='white', edgecolor='white', alpha=0.5),
        horizontalalignment='center', verticalalignment='center')
ax.set_ylim(0, 80)
ax.set_xlim(37000, 102000)
ax.set_xticks([40000, 50000, 60000, 70000, 80000])
ax.set_ylabel('Counts')
# plt.clf()
plt.tight_layout()
plt.show()
```

## 2.6 Normal Distribution

### R

```{r qqplot}
set.seed(3)
norm_samp <- rnorm(100)
qqnorm(norm_samp, main='', xlab='Quantile of normal distribution', ylab='z-score')
abline(a=0, b=1, col='grey')
```

### Py

```{python qqplot}
### Standard Normal and QQ-Plots
# The package _scipy_ has the function (`scipy.stats.probplot`) to create QQ-plots. The argument `dist` specifies the distribution, which is set by default to the normal distribution.

fig, ax = plt.subplots(figsize=(4, 4))

norm_sample = stats.norm.rvs(size=100)
stats.probplot(norm_sample, plot=ax)

plt.tight_layout()
plt.show()
```

## 2.7 Long-Tailed Distributions

### R

```{r Long-Tailed}
nflx <- sp500_px[,'NFLX']
nflx
nflx <- diff(log(nflx[nflx>0]))
qqnorm(nflx)
abline(a=0, b=1, col='grey')
```
### Py

```{python Long-Tailed}
sp500_px = pd.read_csv(SP500_DATA_CSV)

nflx = sp500_px.NFLX
nflx = np.diff(np.log(nflx[nflx>0]))

fig, ax = plt.subplots(figsize=(4, 4))
stats.probplot(nflx, plot=ax)

plt.tight_layout()
plt.show()
```

## 2.8 Student's t-Distribution

## 2.9 Binomial Distribution

### R

```{r Binomial}
dbinom(x=2, size=5, p=0.1)

pbinom(2, 5, 0.1)

dbinom(x=0, size=200, p=0.02)
```

### Py

```{python}
print(stats.binom.pmf(2, n=5, p=0.1))

print(stats.binom.cdf(2, n=5, p=0.1))
```

